name: Run Gradio app until ready

inputs:
  script:
    required: true
  project:
    required: true
  timeout:
    required: false
    default: 3600

runs:
  using: 'composite'
  steps:
    - name: Run Gradio App (Linux/Mac)
      if: ${{ runner.os != 'Windows' }}
      shell: bash
      run: |
        cd ${{ inputs.project }}

        if [ "${{ runner.os }}" == "Linux" ]; then
          # Start the Gradio app in the background
          xvfb-run python ${{ inputs.script }} 2>&1 | tee gradio_log.txt &
        else
          python ${{ inputs.script }} 2>&1 | tee gradio_log.txt &
        fi

        # Assign process ID
        app_pid=$(ps aux | grep -i '[p]ython ${{ inputs.script }}' | awk '{print $2}')

        # Wait for the specific log message
        timeout ${{ inputs.timeout }} bash -c "
          (tail -f gradio_log.txt &) | awk '/Demo is ready!/ {exit}'
        "

        # Capture the readiness status
        status=$?

        # Stop the Gradio app process
        echo "Stopping the Gradio app..."
        pkill -P $app_pid || echo "No child processes to kill."
        kill $app_pid || echo "App process already terminated."
        wait $app_pid || echo "App process cleanup complete."

        # Exit with the readiness check status
        exit $status

    - name: Run Gradio App (Windows)
      if: ${{ runner.os == 'Windows' }}
      shell: powershell
      run: |
        cd ${{ inputs.project }}
        Write-Output "==> Running script: ${{ inputs.script }}"

        $timeout = ${{ inputs.timeout }}
        $start_time = Get-Date
        $success = $false

        if ("${{ inputs.script }}" -like "*test.py") {
          Write-Output "==> test.py detected. Running in foreground..."

          $output = python "${{ inputs.script }}"
          $output | Out-File -FilePath gradio_log.txt -Encoding utf8
          Get-Content -Path gradio_log.txt

          if ($LASTEXITCODE -eq 0) {
            $success = $true
          } else {
            Write-Error "Script exited with code $LASTEXITCODE"
          }

        } else {
          Write-Output "==> Long-running app detected. Launching in background..."
          $proc = Start-Process -NoNewWindow -FilePath "python" -ArgumentList "${{ inputs.script }}" `
                   -RedirectStandardOutput gradio_stdout.txt `
                   -RedirectStandardError gradio_stderr.txt `
                   -PassThru
          $app_pid = $proc.Id
          Write-Output "==> App PID: $app_pid"

          while ($true) {
            if (Test-Path gradio_stdout.txt) {
              $content = Get-Content gradio_stdout.txt -Raw
              if ($content -match "Demo is ready!") {
                $success = $true
                break
              }
            }
            if (((Get-Date) - $start_time).TotalSeconds -ge $timeout) {
              Write-Output "==> Timeout waiting for readiness."
              break
            }
            Start-Sleep -Seconds 2
          }

          Write-Output "==> Stopping background process..."
          Stop-Process -Id $app_pid -Force -ErrorAction SilentlyContinue
        }

        Write-Output "==> Gradio Log Output:"
        if (Test-Path gradio_log.txt) { Get-Content gradio_log.txt }
        if (Test-Path gradio_stdout.txt) { Get-Content gradio_stdout.txt }
        if (Test-Path gradio_stderr.txt) { Get-Content gradio_stderr.txt }

        if (-not $success) {
          exit 1
        }
